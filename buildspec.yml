version: 0.2
phases:
  install:
    runtime-versions:
      python: 3.8
    commands:
      - echo "Installing dependencies..."
      - pip install -r requirements.txt -t lib
      - pip install bandit

  build:
     commands:
      - echo "Linting code..."
      - pylint lambda_function.py || echo "Linting failed."
      - echo "Running security scan..."
      - bandit -r lambda_function.py || echo "Bandit scan failed."
      - echo "Creating deployment package directory..."
      - mkdir -p deployment_package/
      - echo "Copying test.csv to deployment package..."
      - set -x  # Enable debugging output
      - aws s3 cp s3://satwinder/test.csv deployment_package/ || echo "Failed to copy file."
      - set +x  # Disable debugging output
      - echo "Zipping deployment package..."
      - zip -r9 deployment_package.zip deployment_package/

      # Additional build steps
      - echo "Running unit tests..."
      - python -m unittest discover tests/ -v || echo "Unit tests failed."

  post_build:
    commands:
      - echo "Linting code..."
      - pylint lambda_function.py || echo "Linting failed."
      - echo "Running security scan..."
      - bandit -r lambda_function.py

      - echo "Running dependency scanning..."
      - pip install safety
      - safety check

      - echo "Running integration tests..."
      - python -m unittest discover integration_tests/ -v

      - echo "Versioning deployment package..."
      - version=$(git describe --tags --abbrev=0)
      - mv deployment_package.zip deployment_package_$version.zip

      - echo "Updating Lambda Function..."
      - set -x  # Enable debugging output
      - aws lambda update-function-code --function-name githubtolambda --zip-file fileb://deployment_package_$version.zip
      - set +x  # Disable debugging output
      - echo "DONE!!"

      - if [ "$DEPLOY_ENV" == "staging" ]; then
          echo "Deploying to staging environment..."
          aws lambda update-function-code --function-name githubtolambda-staging --zip-file fileb://deployment_package_$version.zip
          echo "Staging deployment completed."
        fi

      - if [ "$DEPLOY_ENV" == "production" ]; then
          echo "Deploying to production environment..."
          aws lambda update-function-code --function-name githubtolambda-production --zip-file fileb://deployment_package_$version.zip
          echo "Production deployment completed."
        fi

      - echo "Sending notification..."
      - # Add your notification logic here (e.g., sending an email, Slack message)
