version: 0.2
phases:
  install:
    runtime-versions:
      python: 3.8
    commands:
      - pip install -r requirements.txt -t lib
      - pip install bandit
      - pip install sphinx==4.5.0  # Use a more recent version of Sphinx
      - pip install awscli
      - echo "Installing dependencies..."

  pre_build:
    commands:
      - echo "Running security scans..."
      - bandit -r /Users/satwindersingh/Desktop/project  # Update the path to your project
      - echo "Security scans completed."

  build:
    commands:
      - echo "Building documentation..."
      - cd /Users/satwindersingh/Desktop/project/documentation
      - sphinx-build -b html . _build/ > sphinx_build.log 2>&1
      - cat sphinx_build.log  # Print the log content for debugging
      - echo "Running additional build tasks..."
      # Add more build commands here

  post_build:
    commands:
      - echo "Updating Lambda Function..."
      - aws lambda update-function-code --function-name githubtolambda --zip-file fileb://deployment_package.zip
      - echo "Lambda function updated."
      - echo "Running additional custom actions..."
      - aws sns publish --topic-arn "arn:aws:sns:us-east-1:708915899842:YourTopicName" --message "Deployment successful. Notify the team."
      - echo "AWS SNS notification sent."
      - echo "Verifying deployment..."
      # Add commands for deployment verification
      - echo "Deploying infrastructure..."
      - aws cloudformation deploy --template-file infrastructure.yaml --stack-name my-stack
      - echo "CloudFormation stack deployed."
      - echo "Promoting to staging..."
      - aws lambda update-alias --function-name githubtolambda --name staging --function-version 1
      - echo "Lambda function promoted to staging."
      - echo "Running integration tests..."
      - pytest integration_tests/
      - echo "Integration tests passed."
      - echo "Performing canary deployment..."
      # Add commands for canary deployment
      - echo "Deploying to production..."
      - aws lambda update-alias --function-name githubtolambda --name production --function-version 1
      - echo "Lambda function deployed to production."
      - echo "Rolling back deployment..."
      # Add commands for rollback steps
      - echo "Archiving build artifacts..."
      - aws s3 cp deployment_package.zip s3://your-artifact-bucket/
      - echo "Build artifacts archived."
      - echo "Uploading CSV file to S3..."
      - aws s3 cp yourfile.csv s3://your-s3-bucket/
      - echo "CSV file uploaded to S3."
      - echo "Notifying team about build completion..."
      - send_notification_command_here  # Replace with the actual command
      - echo "Notification sent."
      - echo "Running additional post-build tasks..."
      # Add more post-build commands here
