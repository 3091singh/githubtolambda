version: 0.2
phases:
  install:
    runtime-versions:
      python: 3.8
    commands:
      - echo "Installing dependencies..."
      - pip install -r requirements.txt -t lib

  pre_build:
    commands:
      - echo "Running security scans..."
      - bandit -r .
      - safety check

  build:
    commands:
      - echo "Zipping deployment package..."
      - cd lib
      - zip -r9 ../deployment_package.zip .
      - cd ..
      - zip -g deployment_package.zip lambda_function.py
      # Add your other build commands here

      # Custom manual approval script
      - echo "Manual approval needed. Please approve in the AWS CodeBuild console."
      - sleep 30  # Wait for 30 seconds (adjust as needed)

  post_build:
    commands:
      - echo "Updating Lambda Function..."
      - aws lambda update-function-code --function-name githubtolambda --zip-file fileb://deployment_package.zip
      - echo "DONE!!"
      
      # Additional custom actions
      - echo "Running additional custom actions..."
      - aws sns publish --topic-arn <your-topic-arn> --message "Deployment successful. Notify the team."

  test:
    commands:
      - echo "Running unit tests..."
      - pytest tests/

      # Additional test commands can be added here
      - echo "Running additional tests..."

  deploy_infrastructure:
    commands:
      - echo "Deploying infrastructure..."
      - aws cloudformation deploy --template-file infrastructure.yaml --stack-name my-stack

  promote_to_staging:
    commands:
      - echo "Promoting to staging..."
      - aws lambda update-alias --function-name githubtolambda --name staging --function-version 1

  integration_test:
    commands:
      - echo "Running integration tests..."
      - pytest integration_tests/

  canary_deployment:
    commands:
      - echo "Performing canary deployment..."
      # Add commands for canary deployment

  deploy_to_production:
    commands:
      - echo "Deploying to production..."
      - aws lambda update-alias --function-name githubtolambda --name production --function-version 1

  verify_deployment:
    commands:
      - echo "Verifying deployment..."
      # Add commands for deployment verification

  rollback:
    commands:
      - echo "Rolling back deployment..."
      # Add commands for rollback steps

  monitor_and_log:
    commands:
      - echo "Monitoring and logging..."
      - aws cloudwatch put-metric-data --metric-name PipelineSuccess --value 1

  cleanup_resources:
    commands:
      - echo "Cleaning up resources..."
      - aws cloudformation delete-stack --stack-name my-stack
